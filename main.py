# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'giaodien.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtWidgets import QListWidgetItem,QWidget,QFileDialog, QVBoxLayout, QApplication, QListWidget, QMainWindow, QAction, QMenuBar, QApplication, QLabel
from PyQt5.QtGui import QCursor, QPixmap, QColor, QIcon, QPixmap, QPainter
from PyQt5.QtCore import Qt, QSize
from PyQt5.QtSvg import QSvgRenderer
from qgis.core import QgsSvgMarkerSymbolLayer,QgsMarkerSymbol,QgsStyle,QgsVectorLayer, QgsProject, QgsSimpleMarkerSymbolLayer, QgsSymbol, QgsVectorLayer, QgsFeature, QgsGeometry, QgsPointXY
from qgis.gui import QgsMapCanvas, QgsMapToolPan, QgsMapToolEmitPoint, QgsVertexMarker
import os
from PyQt5.QtWidgets import QListWidget, QMenu, QAction
from PyQt5.QtCore import Qt
import xml.etree.ElementTree as ET
from osgeo import ogr
import os
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtWidgets import QListWidgetItem, QListWidget
from PyQt5.QtCore import Qt, QMimeData
from PyQt5.QtGui import QDrag
from PyQt5.QtWidgets import QDialog, QVBoxLayout, QComboBox
from test import Ui_Form
from qgscheckablecombobox import QgsCheckableComboBox
from qgsexternalresourcewidget import QgsExternalResourceWidget
from qgsfilterlineedit import QgsFilterLineEdit
from qgsprojectionselectionwidget import QgsProjectionSelectionWidget



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1183, 845)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1183, 26))
        self.menubar.setObjectName("menubar")
        self.menuProject = QtWidgets.QMenu(self.menubar)
        self.menuProject.setObjectName("menuProject")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuLayer = QtWidgets.QMenu(self.menubar)
        self.menuLayer.setObjectName("menuLayer")
        self.menuCreate_Layer = QtWidgets.QMenu(self.menuLayer)
        self.menuCreate_Layer.setObjectName("menuCreate_Layer")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.toolBar_3 = QtWidgets.QToolBar(MainWindow)
        self.toolBar_3.setObjectName("toolBar_3")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_3)
        self.toolBar_2 = QtWidgets.QToolBar(MainWindow)
        self.toolBar_2.setObjectName("toolBar_2")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_2)
        MainWindow.insertToolBarBreak(self.toolBar_2)
        self.dockWidget = QtWidgets.QDockWidget(MainWindow)
        self.dockWidget.setObjectName("dockWidget")
        self.dockWidgetContents_5 = QtWidgets.QWidget()
        self.dockWidgetContents_5.setObjectName("dockWidgetContents_5")
        self.dockWidget.setWidget(self.dockWidgetContents_5)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/folder.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen.setIcon(icon)
        self.actionOpen.setObjectName("actionOpen")
        self.actionPan_Map = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/hello.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPan_Map.setIcon(icon1)
        self.actionPan_Map.setObjectName("actionPan_Map")
        self.actionView_Shafile_Layer = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/line-chart.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionView_Shafile_Layer.setIcon(icon2)
        self.actionView_Shafile_Layer.setObjectName("actionView_Shafile_Layer")
        self.actionToggle_Editting = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/pencil.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionToggle_Editting.setIcon(icon3)
        self.actionToggle_Editting.setObjectName("actionToggle_Editting")
        self.actionAdd_point_feature = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/circle.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAdd_point_feature.setIcon(icon4)
        self.actionAdd_point_feature.setObjectName("actionAdd_point_feature")
        self.menuProject.addAction(self.actionOpen)
        self.menuView.addAction(self.actionPan_Map)
        self.menuCreate_Layer.addAction(self.actionView_Shafile_Layer)
        self.menuLayer.addAction(self.menuCreate_Layer.menuAction())
        self.menuLayer.addAction(self.actionToggle_Editting)
        self.menuEdit.addAction(self.actionAdd_point_feature)
        self.menubar.addAction(self.menuProject.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuLayer.menuAction())
        self.toolBar.addAction(self.actionOpen)
        self.toolBar_3.addAction(self.actionPan_Map)
        self.toolBar_2.addAction(self.actionView_Shafile_Layer)
        self.toolBar_2.addAction(self.actionToggle_Editting)
        self.toolBar_2.addAction(self.actionAdd_point_feature)

        # Tạo một QListWidget để lưu trữ thông tin về các tệp
        self.dockWidget.setWindowTitle("Layers")
        self.dockWidgetContents_5 = QtWidgets.QWidget()
        self.dockWidgetContents_5.setObjectName("dockWidgetContents_5")
        self.fileListWidget = QListWidget(self.dockWidgetContents_5)
        self.fileListWidget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.fileListWidget.customContextMenuRequested.connect(self.showContextMenu)
        self.dockWidget.setWidget(self.fileListWidget)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget)

        self.actionView_Shafile_Layer.triggered.connect(self.open_new_window)
        

        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.mapCanvas = QgsMapCanvas()
        self.verticalLayout.addWidget(self.mapCanvas)
        self.actionOpen.triggered.connect(self.open_file)  
        self.actionPan_Map.triggered.connect(self.pan_map)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuProject.setTitle(_translate("MainWindow", "Project"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.menuLayer.setTitle(_translate("MainWindow", "Layer"))
        self.menuCreate_Layer.setTitle(_translate("MainWindow", "Create Layer"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.toolBar_3.setWindowTitle(_translate("MainWindow", "toolBar_3"))
        self.toolBar_2.setWindowTitle(_translate("MainWindow", "toolBar_2"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionPan_Map.setText(_translate("MainWindow", "Pan Map"))
        self.actionView_Shafile_Layer.setText(_translate("MainWindow", "View Shapefile Layer"))
        self.actionToggle_Editting.setText(_translate("MainWindow", "Toggle Editing"))
        self.actionAdd_point_feature.setText(_translate("MainWindow", "Add Point Feature"))

    def open_new_window(self):
        self.window = QtWidgets.QWidget()  # or another appropriate QWidgets depending on your needs
        self.ui = Ui_Form()
        self.ui.setupUi(self.window)
        self.window.show()

    def open_file(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        fileName, _ = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()", "",
                                          "Shapefile (*.shp);;Mapinfo (*.tab *.id *.map *.gst *.dat);;ECW (*.ecw);;WOR (*.wor)", options=options)
        if fileName:
            file_name_only = os.path.basename(fileName)
            item = QtWidgets.QListWidgetItem(file_name_only)
            layer = QgsVectorLayer(fileName, "layer_name_you_like", "ogr")
            if not layer.isValid():
                print("Layer failed to load!")
            else:
                # Thiết lập độ trong suốt cho lớp
                layer.setOpacity(0.5)

                QgsProject.instance().addMapLayer(layer)
                
                # Lấy danh sách các lớp hiện tại từ QgsProject
                layers = QgsProject.instance().mapLayers().values()
                
                # Cập nhật QgsMapCanvas với danh sách mới của các lớp
                self.mapCanvas.setLayers(layers)
                self.mapCanvas.setExtent(layer.extent())
                self.mapCanvas.refresh()
                
                # Lưu trữ một tham chiếu đến lớp trong mục QListWidgetItem
                item.setData(Qt.UserRole, layer)
                self.fileListWidget.addItem(item)

    def pan_map(self):
        # Tạo một công cụ di chuyển mới với nút chuột trái
        self.pan_tool = QgsMapToolPan(self.mapCanvas)
        self.pan_tool.setAction(self.actionPan_Map)
        
        # Thiết lập công cụ di chuyển mới cho bản đồ
        self.mapCanvas.setMapTool(self.pan_tool)
        
        # Thiết lập con trỏ chuột
        pixmap = QPixmap("D:/python/images/hello.svg")  # Replace with the path to your pan icon
        pixmap = pixmap.scaled(QSize(32, 32), Qt.KeepAspectRatio)  # Change the size to your preference
        cursor = QCursor(pixmap)
        QApplication.instance().setOverrideCursor(cursor)

    def showContextMenu(self, position):
        # Tạo một QMenu
        contextMenu = QMenu(self.fileListWidget)

        # Tạo một QAction cho chức năng xóa
        deleteAction = QAction("Delete", self.fileListWidget)
        deleteAction.triggered.connect(self.deleteItem)

        # Tạo một QAction cho chức năng "Change XML"
        changeiconAction = QAction("Change Icon", self.fileListWidget)
        

        # Thêm QAction vào QMenu
        contextMenu.addAction(deleteAction)
        contextMenu.addAction(changeiconAction)

        # Hiển thị QMenu
        contextMenu.exec_(self.fileListWidget.mapToGlobal(position))

    def deleteItem(self):
        # Xóa mục hiện tại từ QListWidget
        currentItem = self.fileListWidget.currentItem()
        
        # Lấy lớp từ mục và xóa nó khỏi QgsProject
        layer = currentItem.data(Qt.UserRole)
        
        # Xóa marker tương ứng từ danh sách và QgsMapCanvas
        layer_id = layer.id()  # Lấy ID của lớp
        if layer_id in self.markers:
            for m in self.markers[layer_id]:
                self.mapCanvas.scene().removeItem(m)
            del self.markers[layer_id]
        
        QgsProject.instance().removeMapLayer(layer.id())
        
        self.fileListWidget.takeItem(self.fileListWidget.row(currentItem))
        
        # Cập nhật QgsMapCanvas
        self.mapCanvas.refreshAllLayers()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
