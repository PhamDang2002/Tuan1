# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'giaodien.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog,QMessageBox, QDialog, QLabel, QVBoxLayout
import xml.etree.ElementTree as ET
from PIL import Image, ImageDraw
from PyQt5.QtGui import QPainter, QPen, QColor, QPixmap
from PyQt5.QtCore import Qt
from qgis.gui import QgsMapCanvas, QgsMapToolEmitPoint, QgsVertexMarker, QgsMapToolPan, QgsRubberBand
from qgis.core import QgsPointXY, QgsGeometry, QgsWkbTypes, QgsRectangle
from qgis.gui import QgsMapToolPan

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1030, 688)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1030, 26))
        self.menubar.setObjectName("menubar")
        self.menuProject = QtWidgets.QMenu(self.menubar)
        self.menuProject.setObjectName("menuProject")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuLayer = QtWidgets.QMenu(self.menubar)
        self.menuLayer.setObjectName("menuLayer")
        self.menuCreate_Layer = QtWidgets.QMenu(self.menuLayer)
        self.menuCreate_Layer.setObjectName("menuCreate_Layer")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.toolBar_3 = QtWidgets.QToolBar(MainWindow)
        self.toolBar_3.setObjectName("toolBar_3")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_3)
        self.toolBar_2 = QtWidgets.QToolBar(MainWindow)
        self.toolBar_2.setObjectName("toolBar_2")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_2)
        MainWindow.insertToolBarBreak(self.toolBar_2)
        self.dockWidget = QtWidgets.QDockWidget(MainWindow)
        self.dockWidget.setObjectName("dockWidget")
        self.dockWidgetContents_5 = QtWidgets.QWidget()
        self.dockWidgetContents_5.setObjectName("dockWidgetContents_5")
        self.dockWidget.setWidget(self.dockWidgetContents_5)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/folder.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen.setIcon(icon)
        self.actionOpen.setObjectName("actionOpen")
        self.actionPan_Map = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/hello.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPan_Map.setIcon(icon1)
        self.actionPan_Map.setObjectName("actionPan_Map")
        self.actionView_Shafile_Layer = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/line-chart.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionView_Shafile_Layer.setIcon(icon2)
        self.actionView_Shafile_Layer.setObjectName("actionView_Shafile_Layer")
        self.actionAdd_Feature = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/circle.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAdd_Feature.setIcon(icon3)
        self.actionAdd_Feature.setObjectName("actionAdd_Feature")
        self.actionToggle_Eddting = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/pencil.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionToggle_Eddting.setIcon(icon4)
        self.actionToggle_Eddting.setObjectName("actionToggle_Eddting")
        self.actionOpen_XML = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("images/xml.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen_XML.setIcon(icon5)
        self.actionOpen_XML.setObjectName("actionOpen_XML")
        self.menuProject.addAction(self.actionOpen)
        self.menuView.addAction(self.actionPan_Map)
        self.menuCreate_Layer.addAction(self.actionView_Shafile_Layer)
        self.menuLayer.addAction(self.menuCreate_Layer.menuAction())
        self.menuLayer.addAction(self.actionToggle_Eddting)
        self.menuEdit.addAction(self.actionAdd_Feature)
        self.menuEdit.addAction(self.actionOpen_XML)
        self.menubar.addAction(self.menuProject.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuLayer.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.toolBar.addAction(self.actionOpen)
        self.toolBar_3.addAction(self.actionPan_Map)
        self.toolBar_3.addAction(self.actionOpen_XML)
        self.toolBar_2.addAction(self.actionView_Shafile_Layer)
        self.toolBar_2.addAction(self.actionToggle_Eddting)
        self.toolBar_2.addAction(self.actionAdd_Feature)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.actionOpen_XML.triggered.connect(self.open_xml_file)

        self.mapCanvas = QgsMapCanvas(self.centralwidget)
        self.mapCanvas.setObjectName("mapCanvas")
        self.mapCanvas.show()
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.addWidget(self.mapCanvas)
        self.pan_tool = QgsMapToolPan(self.mapCanvas)

        # Kết nối hành động Pan Map với phương thức pan
        self.actionPan_Map.triggered.connect(self.pan)


        # Loại bỏ giới hạn di chuyển của mapCanvas
        self.mapCanvas.setExtent(QgsRectangle())
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuProject.setTitle(_translate("MainWindow", "Project"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.menuLayer.setTitle(_translate("MainWindow", "Layer"))
        self.menuCreate_Layer.setTitle(_translate("MainWindow", "Create Layer"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.toolBar_3.setWindowTitle(_translate("MainWindow", "toolBar_3"))
        self.toolBar_2.setWindowTitle(_translate("MainWindow", "toolBar_2"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionPan_Map.setText(_translate("MainWindow", "Pan Map"))
        self.actionView_Shafile_Layer.setText(_translate("MainWindow", "View Shapefile Layer"))
        self.actionAdd_Feature.setText(_translate("MainWindow", "Add Point Feature"))
        self.actionToggle_Eddting.setText(_translate("MainWindow", "Toggle Eddting"))
        self.actionOpen_XML.setText(_translate("MainWindow", "Open XML"))

    def open_xml_file(self):
        options = QFileDialog.Options()
        fileName, _ = QFileDialog.getOpenFileName(None,"QFileDialog.getOpenFileName()", "","XML Files (*.xml)", options=options)
        if fileName:
            # Parse the XML file
            tree = ET.parse(fileName)
            root = tree.getroot()

            # Extract the symbol and display it
            symbol = root.find('Part')
            self.show_symbol(symbol)

    def pan(self):
        # Kích hoạt công cụ pan
        self.mapCanvas.setMapTool(self.pan_tool)
    def show_symbol(self, symbol):
        # Get the symbol attributes
        symbol_type = symbol.attrib['Type']
        color = int(symbol.attrib['Color'])
        width = int(symbol.attrib['Width'])

        # Convert the color to RGB
        r = (color >> 16) & 255
        g = (color >> 8) & 255
        b = color & 255
        color = (r, g, b)

        # Get the nodes
        nodes = [(int(node.attrib['X']), int(node.attrib['Y'])) for node in symbol.findall('Node')]

        # Create a QgsRubberBand
        rubber_band = QgsRubberBand(self.mapCanvas, QgsWkbTypes.LineGeometry)  # Sử dụng QgsWkbTypes.LineGeometry cho đường

        # Set color and width for rubber_band
        rubber_band.setColor(QColor(r, g, b))  # Màu RGB
        rubber_band.setWidth(width)  # Độ rộng

        # Add points to rubber_band
        for node in nodes:
            point = QgsPointXY(node[0], node[1])
            rubber_band.addPoint(point)

        # Show rubber_band on the map
        rubber_band.show()

        # Calculate the bounding rectangle around the nodes
        min_x = min(node[0] for node in nodes)
        max_x = max(node[0] for node in nodes)
        min_y = min(node[1] for node in nodes)
        max_y = max(node[1] for node in nodes)
        extent = QgsRectangle(min_x, min_y, max_x, max_y)

        # Update the extent of the mapCanvas to surround the symbol
        self.mapCanvas.setExtent(extent)
        self.mapCanvas.refresh()


        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
